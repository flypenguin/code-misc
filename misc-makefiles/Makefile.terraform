# - create settings-secret.sh, SHOULD NEVER BE CHECKED IN, content:
#   ARM_ACCESS_KEY="..."


SHELL := bash
TF_CMD := terraform
TF_DOCKER_IMAGE := hashicorp/terraform
TF_DOCKER_IMAGE_VER := 1.2.0
TF_DOCKER_SCRIPT_NAME := _tf_docker.tmp


.PHONY: all
all: plan

.PHONY: test
test: plan

.PHONY: do
do: apply

.PHONY: ashes
ashes: destroy

.PHONY: clean
clean:
	-rm *.plan 2>/dev/null; true


.PHONY: init
init:
	$(TF_CMD) init

.PHONY: quick
quick:
	@clear -x
	@echo -e "\033[1;33m# ################################################################"
	@echo -e "# terraform plan          \033[1;31m!! QUICK !!\033[1;33m          $$(date "+%Y-%m-%d %H:%M:%S")\n\033[0m"
	$(TF_CMD) plan -out=terraform.plan -refresh=false
	@echo -e "\n\n\033[1;34mDone. Run 'make apply' to apply changes.\033[0m\n"

.PHONY: plan
plan:
	@clear -x
	@echo -e "\033[1;33m# ################################################################"
	@echo -e "# terraform plan                               $$(date "+%Y-%m-%d %H:%M:%S")\n\033[0m"
	$(TF_CMD) plan -out=terraform.plan
	@echo -e "\n\n\033[1;34mDone. Run 'make apply' to apply changes.\033[0m\n"

.PHONY: apply
apply:
	$(TF_CMD) apply terraform.plan ; \
	rm -f terraform.plan

.PHONY: both
both: plan do
	rm -f terraform.plan ; \
	$(TF_CMD) apply -auto-approve

.PHONY: qboth
qboth:
	rm -f terraform.plan ; \
	$(TF_CMD) apply -refresh=false -auto-approve

.PHONY: destroy
destroy:
	$(TF_CMD) destroy

.PHONY: unlock
unlock:
	@test -f settings-secret.sh && source settings-secret.sh ; \
	rm -f terraform.plan ; \
	echo -n "LOCK ID: " ; read LOCK_ID ; \
	$(TF_CMD) force-unlock -force $$LOCK_ID

.PHONY: refresh
refresh:
	$(TF_CMD) refresh

.PHONY: get
get:
	$(TF_CMD) get

.PHONY: output
output:
	$(TF_CMD) output


#
# DOCKER VARIANTS
#

define dscript_content
docker run \\
    -ti --rm \\
    -w /tf/$$(realpath . --relative-to ../../) \\
    -v "$$(realpath ../../):/tf" \\
    -e AWS_PROFILE=$$AWS_PROFILE \\
    -v $$HOME/.aws:/root/.aws \\
    $(TF_DOCKER_IMAGE):${TF_DOCKER_IMAGE_VER} \\
endef

.PHONY: dscript
.SILENT: dscript
dscript:
	echo "$(dscript_content)" > "$(TF_DOCKER_SCRIPT_NAME)"
	echo '    "$${@}"' >> "$(TF_DOCKER_SCRIPT_NAME)"
	chmod 755 "$(TF_DOCKER_SCRIPT_NAME)"

.PHONY: dinit
dinit: dscript
dinit: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dinit: init

dquick: dscript
dquick: TF_CMD = "./$(TF_DOCKER_SCRIPT_NAME)"
dquick: quick

.PHONY: dplan
dplan: dscript
dplan: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dplan: plan

.PHONY: dapply
dapply: dscript
dapply: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dapply: apply

.PHONY: dboth
dboth: dscript
dboth: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dboth: both

.PHONY: dqboth
dqboth: dscript
dqboth: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dqboth: qboth

.PHONY: ddestroy
ddestroy: dscript
ddestroy: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
ddestroy: destroy

.PHONY: dunlock
dunlock: dscript
dunlock: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dunlock: unlock

.PHONY: drefresh
drefresh: dscript
drefresh: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
drefresh: refresh

.PHONY: dget
dget: dscript
dget: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
dget: get

.PHONY: doutput
doutput: dscript
doutput: TF_CMD = ./$(TF_DOCKER_SCRIPT_NAME)
doutput: output



#
# TERRAFORM - set up new project
#

# what does this do?
#   copies _project_temlate/ to $NEW_PROJECT
#   adjusts backend.tf if found:
#     - replace %%PROJECT%% with $NEW_PROJECT
# WARNING: UNTESTED.
.PHONY: new
new:
	@read -p  "New project directory: " SUBJECT ; \
	if [ ! -d "_project_template" ] ; then \
		echo "No _project_template dir found. Aborting." ; \
		exit -1 ; \
	fi ; \
	if [ -z "$$SUBJECT" ] ; then \
	  echo "Abort." ; \
	  exit -1 ; \
	fi ; \
	NEW_PROJECT="$${SUBJECT}" ; \
	NEW_PROJECT=$$(echo $$NEW_PROJECT | tr '[:upper:]' '[:lower:]') ; \
	if [ -d "$$NEW_PROJECT" ] ; then \
	  echo "ERROR: $$NEW_PROJECT already exists. Aborting." ; \
	  exit -1 ; \
	fi ; \
	cp -r _project_template "$$NEW_PROJECT" ; \
	cd "$$NEW_PROJECT" ; \
	if [ -f "backend.tf" ] ; then \
		sed -i \
			-e "s/%%PROJECT%%/$$NEW_PROJECT/g" backend.tf ; \
	else \
		echo "No backend.tf found in project dir - not adjusting values." ; \
	fi
	echo "Dir $$NEW_PROJECT created from template." ; \
	echo "Next steps ..." ; \
	echo "  * run 'make init'" ; \
	echo "  * run 'make plan'" ; \
	echo "  * run 'make do' (if you're bold ;)" ; \
    echo "Done."
