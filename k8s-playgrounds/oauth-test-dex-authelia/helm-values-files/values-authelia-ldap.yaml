---
rbac:
  enabled: true

ingress:
  enabled: true
  # cert-manager doing its magic, using an internal self-signed ca.

pod:
  #command: [sleep, "10000"]
  extraVolumes:
    - name: users-database
      secret:
        secretName: authelia-ldap-users-database
        optional: false
    - name: pre-processed-config-values
      emptyDir: {}
    - # to read the "email" notifications
      name: authelia-ldap-notifications
      emptyDir: {}

  env:
    - # https://is.gd/v9hRop
      # enabled templating ...
      name: X_AUTHELIA_CONFIG_FILTERS
      value: "template"

  extraVolumeMounts:
    - name: authelia-ldap-notifications
      mountPath: /authelia-notifications
    - name: pre-processed-config-values
      mountPath: /ppc

  initContainers:
    - name: pbkdf2-hasher
      image: ghcr.io/authelia/authelia
      command:
        - sh
        - -c
        - |
          set -euo pipefail
          CS=/ppc/client-secrets
          mkdir $CS
          cd $CS
          echo "Password SHA256: $(echo "$CLIENT_SECRET" | sha256sum)"
          authelia crypto hash generate --password "$CLIENT_SECRET" | sed -E "s/^([^ ]+ )?//" > dex-authelia-ldap
          authelia crypto hash validate --password "$CLIENT_SECRET" -- "$(cat dex-authelia-ldap)"
          echo "Validation successful."

      env:
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: authelia-ldap-client-secret-dex
              key: client_secret
      volumeMounts:
        - name: pre-processed-config-values
          mountPath: /ppc

  extraContainers:
    - # to read the "email" notifications
      name: filemanager
      image: filebrowser/filebrowser
      args: ["-p", "28080", "--noauth", "-r", "/authelia-notifications"]
      securityContext:
        runAsUser: 0
      ports:
        - containerPort: 28080
          name: filemanager
      volumeMounts:
        - name: authelia-ldap-notifications
          mountPath: /authelia-notifications

configMap:
  access_control:
    default_policy: two_factor

  authentication_backend:
    refresh_interval: always

    ldap:
      enabled: true
      implementation: "activedirectory"
      address: '{{ secret "/secrets/authelia-ldap-server-config/address" }}' # yes this works.
      timeout: "5 seconds"
      start_tls: false
      tls:
        skip_verify: true
      base_dn: '{{ secret "/secrets/authelia-ldap-server-config/base_dn" }}' # yes this works.
      additional_users_dn: ""
      users_filter: ""
      additional_groups_dn: ""
      groups_filter: ""
      permit_referrals: false
      permit_unauthenticated_bind: false
      permit_feature_detection_failure: false
      user: '{{ secret "/secrets/authelia-ldap-server-config/user" }}' # yes this works.
      ###  AS OF 2025-09-26, ALL OF THIS DOES __NOT__ WORK:
      #
      ## (1)
      # password:
      #   disabled: true
      #   secret_name: authelia-ldap-server-config
      #   path: password
      #
      ## (2)
      # password:
      #   value: '{{ secret "/secrets/authelia-ldap-server-config/password" }}'
      #
      ## The ONLY thing working seems to be:
      password:
        value: "MY VALUE"
      ### END
      attributes:
        username: "userPrincipalName"
        display_name: "displayName"
        mail: "userPrincipalName"
        member_of: "memberOf"

  identity_providers:
    # for all the secret mounting and usage see this:
    #   - https://is.gd/XeHUqZ (INCOMPLETE!)
    #   - https://is.gd/nq0PHf (full config reference)
    #   - https://is.gd/ZAxz96 (how to use secrets)
    # secrets mounted below under "secret.additionalSecrets.[...]"
    oidc:
      enabled: true
      # NO LONGER A STRING. see here: https://is.gd/zNwgrE
      # we mount that secret below. the config says "use value from '/secrets/authelia-ldap-hmac-value/hmac'"
      hmac_secret:
        disabled: true
        secret_name: "authelia-ldap-hmac-value"
        path: hmac
      jwks:
        - key_id: "authelia"
          algorithm: "RS256"
          use: "sig"
          key:
            path: /secrets/authelia-ldap-cert-private-key/tls.key
          # cert-manager certificate: https://is.gd/vLCkz7
          certificate_chain:
            path: /secrets/authelia-ldap-cert-private-key/tls.crt

      # config ref: https://is.gd/nq0PHf
      enable_client_debug_messages: false
      cors:
        # https://is.gd/F3YNB8
        allowed_origins:
          - "*" # FOR NOW

        allowed_origins_from_client_redirect_uris: false

      # https://is.gd/FhAB1j
      # copied from the terratgrunt example ...
      clients:
        - # dex ref @ authelia: https://is.gd/N8wzZP
          # dex oidc connector: ref: https://is.gd/gZdGS6
          # we create the pbkdf2 hash from the init container - see above.
          client_name: Dex
          client_id: dex-authelia-ldap
          client_secret:
            path: /ppc/client-secrets/dex-authelia-ldap
          redirect_uris:
            - https://dex.localhost.traefik.me/callback
          scopes:
            - openid
            - email
            - profile
          response_types:
            - code
          grant_types:
            - authorization_code
            # - refresh_token # Authelia warning: "refresh_token" _WITH_ "offline_access", or none.
          access_token_signed_response_alg: "none"
          userinfo_signed_response_alg: "none"
          token_endpoint_auth_method: "client_secret_post"
          response_modes:
            - form_post
            - query
            - fragment

  notifier:
    filesystem:
      enabled: true
      filename: /authelia-notifications/notification.txt

  password_policy:
    zxcvbn:
      enabled: true
      min_score: 3

  session:
    cookies:
      - domain: localhost.traefik.me
        subdomain: auth-ldap

  storage:
    postgres:
      enabled: true
      deploy: true
      address: "tcp://authelia-ldap-postgresql.authelia-ldap.svc.cluster.local:5432"
      database: "authelia-ldap"
      schema: "public"
      username: "authelia-ldap"
      password:
        secret_name: ~
        value: "authelia-ldap"
        path: "storage.postgres.password.txt"

postgresql:
  # default values, but here to see how we configure this.
  auth:
    postgresPassword: authelia-ldap
    username: authelia-ldap
    password: authelia-ldap
    database: authelia-ldap

secret:
  additionalSecrets:
    authelia-ldap-server-config:
      path: ""
      items:
        - key: address
        - key: base_dn
        - key: user
        - key: password
    authelia-ldap-client-secret-dex:
      path: ""
      items:
        - key: client_secret
    authelia-ldap-hmac-value:
      path: ""
      items:
        - key: hmac
    authelia-ldap-cert-private-key:
      path: ""
      items:
        # https://is.gd/vLCkz7
        - key: ca.crt
        - key: tls.crt
        - key: tls.key
