---
versionOverride: ''
kubeVersionOverride: ''
kubeDNSDomainOverride: ''
enabled: false
image:
  registry: 'ghcr.io'
  repository: 'authelia/authelia'
  tag: ''
  pullPolicy: 'IfNotPresent'
  pullSecrets: []
nameOverride: ~
appNameOverride: ~
annotations: {}
labels: {}
rbac:
  enabled: false
  annotations: {}
  labels: {}
  serviceAccountName: 'authelia'
service:
  type: 'ClusterIP'
  annotations: {}
  labels: {}
  port: 80
  nodePort: 30091
  clusterIP: ~
ingress:
  enabled: false
  annotations: {}
  labels: {}
  rulesOverride: []
  certManager: false
  className: ''
  tls:
    enabled: false
    secret: 'authelia-tls'
  gatewayAPI:
    enabled: false
    hostnamesOverride: []
    parentRefs: []
  traefikCRD:
    enabled: false
    disableIngressRoute: false
    matchOverride: ''
    apiGroupOverride: ''
    apiVersionOverride: ''
    entryPoints: []
    priority: 500
    weight: 10
    sticky: false
    stickyCookieNameOverride: ''
    strategy: 'RoundRobin'
    responseForwardingFlushInterval: '100ms'
    middlewares:
      auth:
        nameOverride: ''
        endpointOverride: ''
        authResponseHeaders:
          - 'Remote-User'
          - 'Remote-Name'
          - 'Remote-Email'
          - 'Remote-Groups'
      chains:
        auth:
          nameOverride: ''
          before: []
          after: []
        ingressRoute:
          before: []
          after: []
    tls:
      disableTLSOptions: false
      certResolver: ''
      domainsOverride: []
      options:
        nameOverride: ''
        minVersion: 'VersionTLS12'
        maxVersion: 'VersionTLS13'
        sniStrict: false
        cipherSuites: []
        curvePreferences: []
pod:
  kind: 'DaemonSet'
  disableRestartOnChanges: false
  annotations: {}
  labels: {}
  command: []
  args: []
  initContainers: []
  replicas: 1
  revisionHistoryLimit: 5
  priorityClassName: ''
  autoscaling:
    enabled: false
    annotations: {}
    labels: {}
    behavior: {}
  strategy:
    type: 'RollingUpdate'
    rollingUpdate:
      partition: 0
      maxSurge: '25%'
      maxUnavailable: '25%'
  securityContext:
    container: {}
    pod: {}
  tolerations: []
  selectors:
    nodeName: ''
    nodeSelector: {}
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
  env: []
  resources:
    limits: {}
    requests: {}
  probes:
    method:
      httpGet:
        path: '/api/health'
        port: 'http'
        scheme: 'HTTP'
    liveness:
      initialDelaySeconds: 0
      periodSeconds: 30
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readiness:
      initialDelaySeconds: 0
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    startup:
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 6
  extraVolumeMounts: []
  extraVolumes: []
  extraContainers: []
podDisruptionBudget:
  enabled: false
  annotations: {}
  labels: {}
  minAvailable: 0
  maxUnavailable: 0
networkPolicy:
  enabled: false
  annotations: {}
  labels: {}
  policyTypes:
    - 'Ingress'
  ingress: []
  egress: []
configMap:
  disabled: false
  annotations: {}
  labels: {}
  key: 'configuration.yaml'
  existingConfigMap: ''
  extraConfigs: []
  filters:
    disabled: false
  server:
    port: 9091
    path: ''
    asset_path: ''
    headers:
      csp_template: ''
    buffers:
      read: 4096
      write: 4096
    timeouts:
      read: '6 seconds'
      write: '6 seconds'
      idle: '30 seconds'
    endpoints:
      enable_pprof: false
      enable_expvars: false
      automatic_authz_implementations: []
      authz: {}
  log:
    level: 'info'
    format: 'text'
    file_path: ''
  telemetry:
    metrics:
      enabled: false
      port: 9959
      buffers:
        read: 4096
        write: 4096
      timeouts:
        read: '6 seconds'
        write: '6 seconds'
        idle: '30 seconds'
      serviceMonitor:
        enabled: false
        annotations: {}
        labels: {}
  default_2fa_method: ''
  theme: 'light'
  definitions:
    network: {}
    user_attributes: {}
  identity_validation:
    reset_password:
      jwt_lifespan: '5 minutes'
      jwt_algorithm: 'HS256'
      secret:
        disabled: false
        secret_name: ~
        value: ''
        path: 'identity_validation.reset_password.jwt.hmac.key'
    elevated_session:
      code_lifespan: '5 minutes'
      elevation_lifespan: '10 minutes'
      characters: 8
      require_second_factor: false
      skip_second_factor: false
  totp:
    disable: false
    issuer: 'Authelia'
    skew: 1
    secret_size: 32
    algorithm: 'SHA1'
    digits: 6
    period: 30
    allowed_algorithms:
      - 'SHA1'
    allowed_digits:
      - 6
    allowed_periods:
      - 30
  webauthn:
    disable: false
    enable_passkey_login: false
    timeout: '60 seconds'
    display_name: 'Authelia'
    attestation_conveyance_preference: 'indirect'
    filtering:
      permitted_aaguids: []
      prohibited_aaguids: []
      prohibit_backup_eligibility: false
    selection_criteria:
      attachment: ''
      discoverability: 'preferred'
      user_verification: 'preferred'
    metadata:
      enabled: false
      cache_policy: 'strict'
      validate_trust_anchor: true
      validate_entry: true
      validate_entry_permit_zero_aaguid: false
      validate_status: true
      validate_status_permitted: []
      validate_status_prohibited: []
  ntp:
    address: 'udp://time.cloudflare.com:123'
    version: 4
    max_desync: '3 seconds'
    disable_startup_check: false
    disable_failure: false
  duo_api:
    enabled: false
    hostname: ''
    integration_key: ''
    enable_self_enrollment: false
    secret:
      disabled: false
      secret_name: ~
      value: ''
      path: 'duo.key'
  authentication_backend:
    password_reset:
      disable: false
      custom_url: ''
    password_change:
      disable: false
    refresh_interval: '5 minutes'
    ldap:
      enabled: false
      implementation: 'activedirectory'
      address: ''
      timeout: '5 seconds'
      start_tls: false
      tls:
        server_name: ''
        skip_verify: false
        minimum_version: 'TLS1.2'
        maximum_version: 'TLS1.3'
      pooling:
        enable: false
        count: 5
        retries: 2
        timeout: '10 seconds'
      base_dn: ''
      additional_users_dn: ''
      users_filter: ''
      additional_groups_dn: ''
      groups_filter: ''
      permit_referrals: false
      permit_unauthenticated_bind: false
      permit_feature_detection_failure: false
      user: ''
      password:
        disabled: false
        secret_name: ~
        value: ''
        path: 'authentication.ldap.password.txt'
      attributes:
        distinguished_name: ''
        username: ''
        display_name: ''
        family_name: ''
        given_name: ''
        middle_name: ''
        nickname: ''
        gender: ''
        birthdate: ''
        website: ''
        profile: ''
        picture: ''
        zoneinfo: ''
        locale: ''
        phone_number: ''
        phone_extension: ''
        street_address: ''
        locality: ''
        region: ''
        postal_code: ''
        country: ''
        mail: ''
        member_of: ''
        group_name: ''
        extra: {}
    file:
      enabled: false
      path: '/config/users_database.yml'
      watch: false
      search:
        email: false
        case_insensitive: false
      extra_attributes: {}
      password:
        algorithm: 'argon2'
        argon2:
          variant: 'argon2id'
          iterations: 3
          memory: 65536
          parallelism: 4
          key_length: 32
          salt_length: 16
        scrypt:
          variant: 'scrypt'
          iterations: 16
          block_size: 8
          parallelism: 1
          key_length: 32
          salt_length: 16
        pbkdf2:
          variant: 'sha512'
          iterations: 310000
          salt_length: 16
        sha2crypt:
          variant: 'sha512'
          iterations: 50000
          salt_length: 16
        bcrypt:
          variant: 'standard'
          cost: 12
  password_policy:
    standard:
      enabled: false
      min_length: 8
      max_length: 0
      require_uppercase: false
      require_lowercase: false
      require_number: false
      require_special: false
    zxcvbn:
      enabled: false
      min_score: 0
  access_control:
    secret:
      enabled: false
      key: 'configuration.acl.yaml'
      existingSecret: ''
    default_policy: 'deny'
    rules: []
  session:
    name: 'authelia_session'
    same_site: 'lax'
    expiration: '1 hour'
    inactivity: '5 minutes'
    remember_me: '1 month'
    encryption_key:
      disabled: false
      secret_name: ~
      value: ''
      path: 'session.encryption.key'
    cookies: []
    redis:
      enabled: false
      deploy: false
      host: 'redis.databases.svc.cluster.local'
      port: 6379
      username: ''
      password:
        disabled: false
        secret_name: ~
        value: ''
        path: 'session.redis.password.txt'
      database_index: 0
      maximum_active_connections: 8
      minimum_idle_connections: 0
      tls:
        enabled: false
        server_name: ''
        skip_verify: false
        minimum_version: 'TLS1.2'
        maximum_version: 'TLS1.3'
      high_availability:
        enabled: false
        sentinel_name: 'mysentinel'
        username: ''
        password:
          disabled: false
          secret_name: ~
          value: ''
          path: 'session.redis.sentinel.password.txt'
        nodes: []
        route_by_latency: false
        route_randomly: false
  regulation:
    modes:
      - 'user'
    max_retries: 3
    find_time: '2 minutes'
    ban_time: '5 minutes'
  storage:
    encryption_key:
      disabled: false
      secret_name: ~
      value: ''
      path: 'storage.encryption.key'
    local:
      enabled: false
      path: '/config/db.sqlite3'
    mysql:
      enabled: false
      deploy: false
      address: 'tcp://mysql.databases.svc.cluster.local:3306'
      timeout: '5 seconds'
      database: 'authelia'
      username: 'authelia'
      password:
        disabled: false
        secret_name: ~
        value: ''
        path: 'storage.mysql.password.txt'
      tls:
        enabled: false
        server_name: ''
        skip_verify: false
        minimum_version: 'TLS1.2'
        maximum_version: 'TLS1.3'
    postgres:
      enabled: false
      deploy: false
      address: 'tcp://postgres.databases.svc.cluster.local:5432'
      servers: []
      timeout: '5 seconds'
      database: 'authelia'
      schema: 'public'
      username: 'authelia'
      password:
        disabled: false
        secret_name: ~
        value: ''
        path: 'storage.postgres.password.txt'
      tls:
        enabled: false
        server_name: ''
        skip_verify: false
        minimum_version: 'TLS1.2'
        maximum_version: 'TLS1.3'
  notifier:
    disable_startup_check: false
    filesystem:
      enabled: false
      filename: '/config/notification.txt'
    smtp:
      enabled: false
      address: 'submission://smtp.mail.svc.cluster.local:587'
      timeout: '5 seconds'
      sender: 'Authelia <admin@example.com>'
      identifier: 'localhost'
      subject: '[Authelia] {title}'
      startup_check_address: 'test@authelia.com'
      disable_html_emails: false
      disable_require_tls: false
      disable_starttls: false
      username: ''
      password:
        disabled: false
        secret_name: ~
        value: ''
        path: 'notifier.smtp.password.txt'
      tls:
        server_name: ''
        skip_verify: false
        minimum_version: 'TLS1.2'
        maximum_version: 'TLS1.3'
  identity_providers:
    oidc:
      enabled: false
      hmac_secret:
        disabled: false
        secret_name: ~
        value: ''
        path: 'identity_providers.oidc.hmac.key'
      lifespans:
        access_token: '1 hour'
        refresh_token: '1 hour and 30 minutes'
        id_token: '1 hour'
        authorize_code: '1 minute'
        device_code: '10 minutes'
        custom: {}
      claims_policies: {}
      scopes: {}
      enforce_pkce: 'public_clients_only'
      enable_pkce_plain_challenge: false
      minimum_parameter_entropy: 8
      enable_client_debug_messages: false
      pushed_authorizations:
        enforce: false
        context_lifespan: '5 minutes'
      authorization_policies: {}
      jwks: []
      cors:
        endpoints: []
        allowed_origins: []
        allowed_origins_from_client_redirect_uris: false
      clients: []
secret:
  disabled: false
  existingSecret: ''
  annotations: {}
  labels: {}
  mountPath: '/secrets'
  additionalSecrets: {}
certificates:
  existingSecret: ''
  annotations: {}
  labels: {}
  values: []
persistence:
  enabled: false
  annotations: {}
  labels: {}
  readOnly: false
  subPath: ''
  subPathExpr: ''
  mountPropagation: ''
  existingClaim: ''
  storageClass: ''
  volumeName: ''
  accessModes:
    - 'ReadWriteOnce'
  size: '100Mi'
  selector: {}
  extraPersistentVolumeClaims:
    example:
      enabled: false
      annotations: {}
      labels: {}
      readOnly: false
      subPath: ''
      subPathExpr: ''
      mountPropagation: ''
      existingClaim: ''
      storageClass: ''
      volumeName: ''
      accessModes:
        - 'ReadWriteOnce'
      size: '100Mi'
      selector: {}
mariadb:
  architecture: 'standalone'
  auth:
    database: 'authelia'
    username: 'authelia'
    password: 'authelia'
    rootPassword: 'authelia'
  primary:
    resources: {}
    persistence:
      enabled: false
      size: '1Gi'
      storageClass: ''
postgresql:
  auth:
    postgresPassword: 'authelia'
    username: 'authelia'
    password: 'authelia'
    database: 'authelia'
  primary:
    persistence:
      enabled: false
      storageClass: ''
      size: '1Gi'
    resources: {}
redis:
  architecture: 'standalone'
  auth:
    enabled: false
    sentinel: true
    password: 'redis'
    existingSecret: ''
    existingSecretPasswordKey: ''
    usePasswordFiles: false
  master:
    resources: {}
    priorityClassName: ''
    persistence:
      enabled: false
      storageClass: ''
      accessModes:
        - 'ReadWriteOnce'
      size: '1Gi'
  replica:
    replicaCount: 3
    resources: {}
    priorityClassName: ''
    persistence:
      enabled: false
      storageClass: ''
      accessModes:
        - 'ReadWriteOnce'
      size: '1Gi'
