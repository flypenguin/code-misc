#!/usr/bin/env bash

# ===========================================================================


DEBUG=1
MIN_VALID_DAYS=21
LE_DIR="$HOME/.config/letsencrypt"
LE_CERT_DIR="${LE_DIR}/live"
CERT_FILE=cert.pem

OUTPUT_TMP=$(mktemp)
MSG_TMP=$(mktemp)
MAIL_TMP=$(mktemp)
chmod 600 $OUTPUT_TMP $MSG_TMP $MAIL_TMP

# in cron we don't have a PATH set ...
PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"


# ===========================================================================


# error helper
die() {
  echo "ERROR: $@"
  exit -1
}


# reads the domains from cli.ini
get_domains() {
  cat "$HOME/.config/letsencrypt/cli.ini" | \
    grep -E '^[ \t]*domains *=' | \
    cut -d= -f2 | \
    sed -e 's/^ *//g' -e 's/ *$//g' -e 's/  */ /g'
}


domain_renew_init() {
  RENEW_STATUS="SUCCESS"
  echo -n "" > $OUTPUT_TMP
  echo -n "" > $MSG_TMP
  echo -n "" > $MAIL_TMP
}


domain_renew_fail() {
  RENEW_STATUS="FAILED"
}


send_status_email() {
  if [ $RENEW_STATUS = "SUCCESS" ] ; then
    MAIL_SUBJECT="Certificate renewal for $DOMAIN :)"
    echo -e "The certificate for the following domain has been renewed:\n"     >> $MAIL_TMP
    echo -e "* $DOMAIN\n\nPlease check if it was installed correctly.\n\n"     >> $MAIL_TMP
  else
    MAIL_SUBJECT="Certificate renewal for $DOMAIN *FAILED*"
    echo -e "The certificate renewal for the following domain has FAILED:\n\n" >> $MAIL_TMP
    echo -e "* $DOMAIN\n\n"                                                    >> $MAIL_TMP
  fi

  echo -e "Further information:\n"                                             >> $MAIL_TMP
  cat $MSG_TMP                                                                 >> $MAIL_TMP
  echo -e "\nEnd of further information.\n\n"                                  >> $MAIL_TMP
  echo -e "Regards,\nyour friendly auto-update script\n\n"                     >> $MAIL_TMP
  mail -s "$MAIL_SUBJECT" $USER < $MAIL_TMP
}


# checks if a cert has to be renewed. returns failure when renewal is needed
# $1 - the domain name
check_cert() {
  # unfortunately we need to do this here, cause in here we already use it.
  domain_renew_init

  ACTIVE_SERIAL=$(cert-info --host $1 --option -serial | cut -d "=" -f2)
  [ -z "$ACTIVE_SERIAL" ] && die "$1 - Unable to get active certificate serial number"
  [ $DEBUG = 1 ] && echo "$1 - active serial: $ACTIVE_SERIAL"

  ALL_CERT_FILES="$(find $LE_CERT_DIR/${1}*/ -iname $CERT_FILE | sort -k1)"

  for cert in $ALL_CERT_FILES ; do
    cert_serial=$(openssl x509 -in $cert -serial -noout | cut -d"=" -f2)
    [ $DEBUG = 1 ] && echo "$1 - processing certificate: $cert, serial: $cert_serial..."
    if [ "$cert_serial" = "$ACTIVE_SERIAL" ]; then
      openssl x509 -checkend $(( $MIN_VALID_DAYS * 86400 )) -in "$cert" > /dev/null
      rv=$?
      [ $DEBUG = 1 -a $rv != 0 ] && echo "$1 - certificate match, NEEDS RENEWAL"
      [ $DEBUG = 1 -a $rv  = 0 ] && echo "$1 - certificate match, still valid"
      return $rv
    fi
  done
  [ $DEBUG = 1 ] && echo "$1 - unable to find active cert. force-upgrading."
  echo "* force-upgrade, unable to find active certificate by serial" >> $MSG_TMP
  return 1
}


# renew the certificate for a domain
# $1 - the domain to renew the cert for
renew_cert() {
  # save letsencrypt output in a var
  letsencrypt certonly -d $1 > $OUTPUT_TMP 2>&1
  LE_RV=$?
  [ $LE_RV != 0 ] && domain_renew_fail && return 1

  # make sure the fullchain.pem string is in the output
  if ! grep -q fullchain.pem $OUTPUT_TMP ; then
    domain_renew_fail
    echo -e "* no 'fullchain.pem' string in letsencrypt output found.\n" >> $MSG_TMP
    cat $OUTPUT_TMP >> $MSG_TMP
    return 1
  fi

  # now, try to get the new cert location from the output.
  NEW_CERT_FILE=$(grep fullchain.pem $OUTPUT_TMP | sed -r 's/.* ([^ \t]+\/fullchain.pem).*/\1/g')
  NEW_CERT_BASEDIR=$(echo $NEW_CERT_FILE | sed -r 's%/fullchain.pem$%%g')

  if [ -z "$NEW_CERT_BASEDIR" ] ; then
    domain_renew_fail
    echo -e "* unable to determine new certificate file!\n" >> $MSG_TMP
    cat $OUTPUT_TMP >> $MSG_TMP
    return 1
  fi

  [ $DEBUG = 1 ] && echo "$1 - new certificate file: $NEW_CERT_FILE"
  echo "* new certificate file: $NEW_CERT_FILE"   >> $MSG_TMP

  uberspace-add-certificate \
    -k $NEW_CERT_BASEDIR/privkey.pem -c $NEW_CERT_BASEDIR/cert.pem > $OUTPUT_TMP 2>&1

  if [ $? != 0 ] ; then
    domain_renew_fail
    echo -e "* unable to install certificate!\n" >> $MSG_TMP
    cat $OUTPUT_TMP >> $MSG_TMP
    return 1
  fi
}


# ===========================================================================

# START

#set -x
DOMAINS=$(get_domains)

for DOMAIN in $DOMAINS ; do
  if ! check_cert $DOMAIN ; then

    # renew cert ...
    renew_cert $DOMAIN

    # finally ...
    send_status_email

  fi
done

# cleanup
rm -rf $MSG_TMP $MAIL_TMP $OUTPUT_TMP
