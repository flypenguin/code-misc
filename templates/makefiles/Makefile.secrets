#
# secret management
#

GPG_DIR=resources/gpg-keys



_check_realpath:
	@if ! realpath / --relative-to . > /dev/null 2>&1 ; then \
	    echo "ERROR: realpath command: you are probably on a mac." ; \
	    echo "       please install the GNU coreutils and use these" ; \
	    echo "       in your shell: brew install coreutils" ; \
	    false ; \
	fi
.PHONY: _check_realpath


# decrpyts all secrets using gpg (or at least tries to ;)
secrets-open:
	find . -iname "*.gpg" | while read GPG_FILE ; do \
	    UNSAFE_FILE=$${GPG_FILE%.gpg} ; \
	    if [ "$$GPG_FILE" -nt "$$UNSAFE_FILE" ] ; then \
	        gpg -d "$$GPG_FILE" > "$$UNSAFE_FILE"; \
	        rv=$$? ; \
	        if [ "$$rv" != "0" ] ; then \
	            rm "$$UNSAFE_FILE" ; \
	            echo -e "\nERROR ($$rv): opening $$GPG_FILE" ; \
	            break ; \
	        fi ; \
	    else \
	        echo "Already open: $$GPG_FILE" ; \
	    fi ; \
	    chmod 600 "$$UNSAFE_FILE" ; \
	    touch -r "$$GPG_FILE" "$$UNSAFE_FILE" ; \
	done
.PHONY: secrets-open
.SILENT: secrets-open


# alias for "make open"
secrets-decrypt: secrets-open
.PHONY: secrets-decrypt


# delete all decrypted secrets
secrets-clean:
	for EXT in asc gpg ; do \
	    find . -iname "*.$$EXT" | while read GPG_FILE ; do \
	        DELETE_ME=$${GPG_FILE%.$$EXT} ; \
	        rm -rfv "$$DELETE_ME"; \
	    done ; \
	done ; \
	for EXT in key sec ; do \
	    find . -iname "*.$$EXT" | while read DELETE_ME ; do \
	        rm -rfv "$$DELETE_ME";  \
	    done ; \
	done
.PHONY: secrets-clean
.SILENT: secrets-clean


_reencrypt: _check_realpath
	# see: https://security.stackexchange.com/a/86751
	REPO_ROOT=$$(realpath --relative-to=. $$(git rev-parse --show-toplevel)) ; \
	RECIPIENTS="" ; \
	for RECIPIENT in "$$REPO_ROOT/$(GPG_DIR)/"* ; do \
	    RECIPIENTS="$$RECIPIENTS -f $$RECIPIENT" ; \
	done ; \
	find . -iname "*.gpg" | while read GPG_FILE ; do \
	    UNSAFE_FILE=$${GPG_FILE%.gpg} ; \
	    if [ "$(FORCE_REENCRYPT)" = "yes" -o "$$UNSAFE_FILE" -nt "$$GPG_FILE" ] ; then \
	        echo "** UPDATING $$GPG_FILE" ; \
	        gpg --yes -e $$RECIPIENTS "$$UNSAFE_FILE" ; \
	    else \
	        echo "-  skipping $$GPG_FILE" ; \
	    fi ; \
	done
.PHONY: _reencrypt
.SILENT: _reencrypt


# https://security.stackexchange.com/a/86751
# Re-encrypt changed secrets
secrets-reencrypt: FORCE_REENCRYPT=no
secrets-reencrypt: _reencrypt
.PHONY: secrets-reencrypt
.SILENT: secrets-reencrypt


# https://security.stackexchange.com/a/86751
# Force a re-encryption of _all_ secrets
secrets-reencrypt-force: FORCE_REENCRYPT=yes
secrets-reencrypt-force: _reencrypt
.PHONY: secrets-reencrypt-force
.SILENT: secrets-reencrypt-force


# alias for "make secrets-open"
open: secrets-open
.PHONY: open


# alias for "make secrets-reencrypt"
reencrypt: secrets-reencrypt
.PHONY: reencrypt


# alias for "make secrets-reencrypt-force"
reencrypt-force: secrets-reencrypt-force
.PHONY: reencrypt-force
